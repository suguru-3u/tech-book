package org.example.良いコード悪いコード学ぶ設計入門.悪しき構造の弊害を知覚する

/*問題---------------------------------------------------------------------------------------------*/
/*
問題：
以下のようなデータクラス `UserData` を使って、ユーザー情報の登録処理を実装した開発者がいました。

このプログラムには以下のような設計上の課題があります。
- データクラスをそのまま使っているため、値の検証が分散しやすく、重複や修正漏れの原因になります。
- ネストした条件分岐や不明瞭な変数名がコードを読みづらくしています。

あなたのタスクは、以下の問題のある実装を読み、設計を改善した上で、ユーザー登録処理をより良い構造で書き直すことです。

要件：
- ユーザーは `name` と `age` を持ちます。
- 名前は空であってはならず、年齢は18歳以上でなければなりません。
- 無効な入力には例外を投げてください。
- 値の正当性は適切な箇所で検証してください

下記のコードは問題のある例です。このコードを改善してください。
*/

// 問題のあるコード（これを元にリファクタリングしてください）
data class UserData(val name: String, val age: Int)

fun registerUser(user: UserData) {
    if (user.name != "") {
        if (user.age >= 18) {
            println("User ${user.name} is registered.")
        } else {
            println("Age must be at least 18.")
        }
    } else {
        println("Name must not be blank.")
    }
}

fun main() {
    val user1 = UserData("Alice", 20)
    registerUser(user1)

    val user2 = UserData("", 25)
    registerUser(user2)

    val user3 = UserData("Bob", 15)
    registerUser(user3)
}

/*回答---------------------------------------------------------------------------------------------*/

// 問題のあるコード（これを元にリファクタリングしてください）
data class UserDataV2(val name: String, val age: Int) {
    init {
        check(name.isNotBlank()) { "Name must not be blank." }
        check(age >= 18) { "Age must be at least 18." }

    }

    fun registerUserV2() {
        println("User ${name} is registered.")
    }
}

/*メモ---------------------------------------------------------------------------------------------*/

/**
 * 良いプログラム設計を行う上で、気をつけることがある
 * ・意味不明な名前をつけない
 * ・連番命名もよくない
 * ・条件分岐のネストもしてはいけない
 * ・データしか中身がない、データクラスを作成するとどうなるか？
 * データクラスのデータを扱うコードが重複してしまう危険性がある
 * データクラスのデータを扱う箇所が多く修正が漏れてしまう
 * 可読性が低くなってしまう
 * 生焼けオブジェクトが発生してしまう可能性がある
 * 不正値の混入を許してしまう可能性がある
 */